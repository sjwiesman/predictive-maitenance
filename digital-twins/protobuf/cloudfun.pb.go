// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: protobuf/cloudfun.proto

package entities

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Status int32

const (
	Status_UNKNOWN   Status = 0
	Status_HEALTHY   Status = 1
	Status_UNHEALTHY Status = 2
	Status_FAILED    Status = 3
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "HEALTHY",
		2: "UNHEALTHY",
		3: "FAILED",
	}
	Status_value = map[string]int32{
		"UNKNOWN":   0,
		"HEALTHY":   1,
		"UNHEALTHY": 2,
		"FAILED":    3,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_cloudfun_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_protobuf_cloudfun_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_cloudfun_proto_rawDescGZIP(), []int{0}
}

type ServerMetricReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId                                     string  `protobuf:"bytes,100,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	RackId                                       string  `protobuf:"bytes,101,opt,name=rack_id,json=rackId,proto3" json:"rack_id,omitempty"`
	CpuPercentNanosecondsIdle                    float64 `protobuf:"fixed64,1,opt,name=cpu_percent_nanoseconds_idle,json=cpuPercentNanosecondsIdle,proto3" json:"cpu_percent_nanoseconds_idle,omitempty"`
	CpuPercentNanosecondsNice                    float64 `protobuf:"fixed64,2,opt,name=cpu_percent_nanoseconds_nice,json=cpuPercentNanosecondsNice,proto3" json:"cpu_percent_nanoseconds_nice,omitempty"`
	CpuPercentNanosecondsInterrupt               float64 `protobuf:"fixed64,3,opt,name=cpu_percent_nanoseconds_interrupt,json=cpuPercentNanosecondsInterrupt,proto3" json:"cpu_percent_nanoseconds_interrupt,omitempty"`
	CpuPercentNanosecondsSoftirq                 float64 `protobuf:"fixed64,4,opt,name=cpu_percent_nanoseconds_softirq,json=cpuPercentNanosecondsSoftirq,proto3" json:"cpu_percent_nanoseconds_softirq,omitempty"`
	CpuPercentNanosecondsSteal                   float64 `protobuf:"fixed64,5,opt,name=cpu_percent_nanoseconds_steal,json=cpuPercentNanosecondsSteal,proto3" json:"cpu_percent_nanoseconds_steal,omitempty"`
	CpuPercentNanosecondsSystem                  float64 `protobuf:"fixed64,6,opt,name=cpu_percent_nanoseconds_system,json=cpuPercentNanosecondsSystem,proto3" json:"cpu_percent_nanoseconds_system,omitempty"`
	CpuPercentNanosecondsUser                    float64 `protobuf:"fixed64,7,opt,name=cpu_percent_nanoseconds_user,json=cpuPercentNanosecondsUser,proto3" json:"cpu_percent_nanoseconds_user,omitempty"`
	CpuPercentNanosecondsWait                    float64 `protobuf:"fixed64,8,opt,name=cpu_percent_nanoseconds_wait,json=cpuPercentNanosecondsWait,proto3" json:"cpu_percent_nanoseconds_wait,omitempty"`
	InterfaceIfDroppedIn                         float64 `protobuf:"fixed64,9,opt,name=interface_if_dropped_in,json=interfaceIfDroppedIn,proto3" json:"interface_if_dropped_in,omitempty"`
	InterfaceIfErrorsIn                          float64 `protobuf:"fixed64,10,opt,name=interface_if_errors_in,json=interfaceIfErrorsIn,proto3" json:"interface_if_errors_in,omitempty"`
	InterfaceIfOctetsIn                          float64 `protobuf:"fixed64,11,opt,name=interface_if_octets_in,json=interfaceIfOctetsIn,proto3" json:"interface_if_octets_in,omitempty"`
	InterfaceIfPacketsIn                         float64 `protobuf:"fixed64,12,opt,name=interface_if_packets_in,json=interfaceIfPacketsIn,proto3" json:"interface_if_packets_in,omitempty"`
	InterfaceIfDroppedOut                        float64 `protobuf:"fixed64,13,opt,name=interface_if_dropped_out,json=interfaceIfDroppedOut,proto3" json:"interface_if_dropped_out,omitempty"`
	InterfaceIfErrorsOut                         float64 `protobuf:"fixed64,14,opt,name=interface_if_errors_out,json=interfaceIfErrorsOut,proto3" json:"interface_if_errors_out,omitempty"`
	InterfaceIfOctetsOut                         float64 `protobuf:"fixed64,15,opt,name=interface_if_octets_out,json=interfaceIfOctetsOut,proto3" json:"interface_if_octets_out,omitempty"`
	InterfaceIfPacketsOut                        float64 `protobuf:"fixed64,16,opt,name=interface_if_packets_out,json=interfaceIfPacketsOut,proto3" json:"interface_if_packets_out,omitempty"`
	MemoryMemoryBuffered                         float64 `protobuf:"fixed64,17,opt,name=memory_memory_buffered,json=memoryMemoryBuffered,proto3" json:"memory_memory_buffered,omitempty"`
	MemoryMemoryCached                           float64 `protobuf:"fixed64,18,opt,name=memory_memory_cached,json=memoryMemoryCached,proto3" json:"memory_memory_cached,omitempty"`
	MemoryMemoryFree                             float64 `protobuf:"fixed64,19,opt,name=memory_memory_free,json=memoryMemoryFree,proto3" json:"memory_memory_free,omitempty"`
	MemoryMemorySlabRecl                         float64 `protobuf:"fixed64,20,opt,name=memory_memory_slab_recl,json=memoryMemorySlabRecl,proto3" json:"memory_memory_slab_recl,omitempty"`
	MemoryMemorySlabUnrecl                       float64 `protobuf:"fixed64,21,opt,name=memory_memory_slab_unrecl,json=memoryMemorySlabUnrecl,proto3" json:"memory_memory_slab_unrecl,omitempty"`
	MemoryMemoryTotal                            float64 `protobuf:"fixed64,22,opt,name=memory_memory_total,json=memoryMemoryTotal,proto3" json:"memory_memory_total,omitempty"`
	MemoryMemoryUsed                             float64 `protobuf:"fixed64,23,opt,name=memory_memory_used,json=memoryMemoryUsed,proto3" json:"memory_memory_used,omitempty"`
	DiskDiskIoTimeIoTime                         float64 `protobuf:"fixed64,24,opt,name=disk_disk_io_time_io_time,json=diskDiskIoTimeIoTime,proto3" json:"disk_disk_io_time_io_time,omitempty"`
	DiskDiskIoTimeWeightedIoTime                 float64 `protobuf:"fixed64,25,opt,name=disk_disk_io_time_weighted_io_time,json=diskDiskIoTimeWeightedIoTime,proto3" json:"disk_disk_io_time_weighted_io_time,omitempty"`
	DiskDiskMergedRead                           float64 `protobuf:"fixed64,26,opt,name=disk_disk_merged_read,json=diskDiskMergedRead,proto3" json:"disk_disk_merged_read,omitempty"`
	DiskDiskMergedWrite                          float64 `protobuf:"fixed64,27,opt,name=disk_disk_merged_write,json=diskDiskMergedWrite,proto3" json:"disk_disk_merged_write,omitempty"`
	DiskDiskOctectsRead                          float64 `protobuf:"fixed64,28,opt,name=disk_disk_octects_read,json=diskDiskOctectsRead,proto3" json:"disk_disk_octects_read,omitempty"`
	DiskDiskOctectsWrite                         float64 `protobuf:"fixed64,29,opt,name=disk_disk_octects_write,json=diskDiskOctectsWrite,proto3" json:"disk_disk_octects_write,omitempty"`
	DiskDiskOpsRead                              float64 `protobuf:"fixed64,30,opt,name=disk_disk_ops_read,json=diskDiskOpsRead,proto3" json:"disk_disk_ops_read,omitempty"`
	DiskDiskOpsWrite                             float64 `protobuf:"fixed64,31,opt,name=disk_disk_ops_write,json=diskDiskOpsWrite,proto3" json:"disk_disk_ops_write,omitempty"`
	DiskDiskTimeRead                             float64 `protobuf:"fixed64,32,opt,name=disk_disk_time_read,json=diskDiskTimeRead,proto3" json:"disk_disk_time_read,omitempty"`
	DiskDiskTimeWrite                            float64 `protobuf:"fixed64,33,opt,name=disk_disk_time_write,json=diskDiskTimeWrite,proto3" json:"disk_disk_time_write,omitempty"`
	ProcessesPsStateBlocked                      float64 `protobuf:"fixed64,34,opt,name=processes_ps_state_blocked,json=processesPsStateBlocked,proto3" json:"processes_ps_state_blocked,omitempty"`
	ProcessesPsStatePaging                       float64 `protobuf:"fixed64,35,opt,name=processes_ps_state_paging,json=processesPsStatePaging,proto3" json:"processes_ps_state_paging,omitempty"`
	ProcessesPsStateRunning                      float64 `protobuf:"fixed64,36,opt,name=processes_ps_state_running,json=processesPsStateRunning,proto3" json:"processes_ps_state_running,omitempty"`
	ProcessesPsStateSleeping                     float64 `protobuf:"fixed64,37,opt,name=processes_ps_state_sleeping,json=processesPsStateSleeping,proto3" json:"processes_ps_state_sleeping,omitempty"`
	ProcessesPsStateStopped                      float64 `protobuf:"fixed64,38,opt,name=processes_ps_state_stopped,json=processesPsStateStopped,proto3" json:"processes_ps_state_stopped,omitempty"`
	ProcessesPsStateZombies                      float64 `protobuf:"fixed64,39,opt,name=processes_ps_state_zombies,json=processesPsStateZombies,proto3" json:"processes_ps_state_zombies,omitempty"`
	MemoryAndCacheMemoryBandwidthLocal           float64 `protobuf:"fixed64,40,opt,name=memory_and_cache_memory_bandwidth_local,json=memoryAndCacheMemoryBandwidthLocal,proto3" json:"memory_and_cache_memory_bandwidth_local,omitempty"`
	MemoryAndCacheMemoryBandwidthRemote          float64 `protobuf:"fixed64,41,opt,name=memory_and_cache_memory_bandwidth_remote,json=memoryAndCacheMemoryBandwidthRemote,proto3" json:"memory_and_cache_memory_bandwidth_remote,omitempty"`
	MemoryAndCacheBytesLlc                       float64 `protobuf:"fixed64,42,opt,name=memory_and_cache_bytes_llc,json=memoryAndCacheBytesLlc,proto3" json:"memory_and_cache_bytes_llc,omitempty"`
	MemoryExceptionsErrorsCorrectedMemoryErrors  float64 `protobuf:"fixed64,43,opt,name=memory_exceptions_errors_corrected_memory_errors,json=memoryExceptionsErrorsCorrectedMemoryErrors,proto3" json:"memory_exceptions_errors_corrected_memory_errors,omitempty"`
	MemoryExceptionsErrorsUncorrectedMemoryError float64 `protobuf:"fixed64,44,opt,name=memory_exceptions_errors_uncorrected_memory_error,json=memoryExceptionsErrorsUncorrectedMemoryError,proto3" json:"memory_exceptions_errors_uncorrected_memory_error,omitempty"`
	MemoryThrottlingSensor                       float64 `protobuf:"fixed64,45,opt,name=memory_throttling_sensor,json=memoryThrottlingSensor,proto3" json:"memory_throttling_sensor,omitempty"`
	IpmiVoltage                                  float64 `protobuf:"fixed64,50,opt,name=ipmi_voltage,json=ipmiVoltage,proto3" json:"ipmi_voltage,omitempty"`
	IpmiTemperatureAgg                           float64 `protobuf:"fixed64,52,opt,name=ipmi_temperature_agg,json=ipmiTemperatureAgg,proto3" json:"ipmi_temperature_agg,omitempty"`
	IpmiAirflow                                  float64 `protobuf:"fixed64,53,opt,name=ipmi_airflow,json=ipmiAirflow,proto3" json:"ipmi_airflow,omitempty"`
	IpmiWattsInputPower                          float64 `protobuf:"fixed64,54,opt,name=ipmi_watts_input_power,json=ipmiWattsInputPower,proto3" json:"ipmi_watts_input_power,omitempty"`
}

func (x *ServerMetricReport) Reset() {
	*x = ServerMetricReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_cloudfun_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMetricReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMetricReport) ProtoMessage() {}

func (x *ServerMetricReport) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_cloudfun_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMetricReport.ProtoReflect.Descriptor instead.
func (*ServerMetricReport) Descriptor() ([]byte, []int) {
	return file_protobuf_cloudfun_proto_rawDescGZIP(), []int{0}
}

func (x *ServerMetricReport) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *ServerMetricReport) GetRackId() string {
	if x != nil {
		return x.RackId
	}
	return ""
}

func (x *ServerMetricReport) GetCpuPercentNanosecondsIdle() float64 {
	if x != nil {
		return x.CpuPercentNanosecondsIdle
	}
	return 0
}

func (x *ServerMetricReport) GetCpuPercentNanosecondsNice() float64 {
	if x != nil {
		return x.CpuPercentNanosecondsNice
	}
	return 0
}

func (x *ServerMetricReport) GetCpuPercentNanosecondsInterrupt() float64 {
	if x != nil {
		return x.CpuPercentNanosecondsInterrupt
	}
	return 0
}

func (x *ServerMetricReport) GetCpuPercentNanosecondsSoftirq() float64 {
	if x != nil {
		return x.CpuPercentNanosecondsSoftirq
	}
	return 0
}

func (x *ServerMetricReport) GetCpuPercentNanosecondsSteal() float64 {
	if x != nil {
		return x.CpuPercentNanosecondsSteal
	}
	return 0
}

func (x *ServerMetricReport) GetCpuPercentNanosecondsSystem() float64 {
	if x != nil {
		return x.CpuPercentNanosecondsSystem
	}
	return 0
}

func (x *ServerMetricReport) GetCpuPercentNanosecondsUser() float64 {
	if x != nil {
		return x.CpuPercentNanosecondsUser
	}
	return 0
}

func (x *ServerMetricReport) GetCpuPercentNanosecondsWait() float64 {
	if x != nil {
		return x.CpuPercentNanosecondsWait
	}
	return 0
}

func (x *ServerMetricReport) GetInterfaceIfDroppedIn() float64 {
	if x != nil {
		return x.InterfaceIfDroppedIn
	}
	return 0
}

func (x *ServerMetricReport) GetInterfaceIfErrorsIn() float64 {
	if x != nil {
		return x.InterfaceIfErrorsIn
	}
	return 0
}

func (x *ServerMetricReport) GetInterfaceIfOctetsIn() float64 {
	if x != nil {
		return x.InterfaceIfOctetsIn
	}
	return 0
}

func (x *ServerMetricReport) GetInterfaceIfPacketsIn() float64 {
	if x != nil {
		return x.InterfaceIfPacketsIn
	}
	return 0
}

func (x *ServerMetricReport) GetInterfaceIfDroppedOut() float64 {
	if x != nil {
		return x.InterfaceIfDroppedOut
	}
	return 0
}

func (x *ServerMetricReport) GetInterfaceIfErrorsOut() float64 {
	if x != nil {
		return x.InterfaceIfErrorsOut
	}
	return 0
}

func (x *ServerMetricReport) GetInterfaceIfOctetsOut() float64 {
	if x != nil {
		return x.InterfaceIfOctetsOut
	}
	return 0
}

func (x *ServerMetricReport) GetInterfaceIfPacketsOut() float64 {
	if x != nil {
		return x.InterfaceIfPacketsOut
	}
	return 0
}

func (x *ServerMetricReport) GetMemoryMemoryBuffered() float64 {
	if x != nil {
		return x.MemoryMemoryBuffered
	}
	return 0
}

func (x *ServerMetricReport) GetMemoryMemoryCached() float64 {
	if x != nil {
		return x.MemoryMemoryCached
	}
	return 0
}

func (x *ServerMetricReport) GetMemoryMemoryFree() float64 {
	if x != nil {
		return x.MemoryMemoryFree
	}
	return 0
}

func (x *ServerMetricReport) GetMemoryMemorySlabRecl() float64 {
	if x != nil {
		return x.MemoryMemorySlabRecl
	}
	return 0
}

func (x *ServerMetricReport) GetMemoryMemorySlabUnrecl() float64 {
	if x != nil {
		return x.MemoryMemorySlabUnrecl
	}
	return 0
}

func (x *ServerMetricReport) GetMemoryMemoryTotal() float64 {
	if x != nil {
		return x.MemoryMemoryTotal
	}
	return 0
}

func (x *ServerMetricReport) GetMemoryMemoryUsed() float64 {
	if x != nil {
		return x.MemoryMemoryUsed
	}
	return 0
}

func (x *ServerMetricReport) GetDiskDiskIoTimeIoTime() float64 {
	if x != nil {
		return x.DiskDiskIoTimeIoTime
	}
	return 0
}

func (x *ServerMetricReport) GetDiskDiskIoTimeWeightedIoTime() float64 {
	if x != nil {
		return x.DiskDiskIoTimeWeightedIoTime
	}
	return 0
}

func (x *ServerMetricReport) GetDiskDiskMergedRead() float64 {
	if x != nil {
		return x.DiskDiskMergedRead
	}
	return 0
}

func (x *ServerMetricReport) GetDiskDiskMergedWrite() float64 {
	if x != nil {
		return x.DiskDiskMergedWrite
	}
	return 0
}

func (x *ServerMetricReport) GetDiskDiskOctectsRead() float64 {
	if x != nil {
		return x.DiskDiskOctectsRead
	}
	return 0
}

func (x *ServerMetricReport) GetDiskDiskOctectsWrite() float64 {
	if x != nil {
		return x.DiskDiskOctectsWrite
	}
	return 0
}

func (x *ServerMetricReport) GetDiskDiskOpsRead() float64 {
	if x != nil {
		return x.DiskDiskOpsRead
	}
	return 0
}

func (x *ServerMetricReport) GetDiskDiskOpsWrite() float64 {
	if x != nil {
		return x.DiskDiskOpsWrite
	}
	return 0
}

func (x *ServerMetricReport) GetDiskDiskTimeRead() float64 {
	if x != nil {
		return x.DiskDiskTimeRead
	}
	return 0
}

func (x *ServerMetricReport) GetDiskDiskTimeWrite() float64 {
	if x != nil {
		return x.DiskDiskTimeWrite
	}
	return 0
}

func (x *ServerMetricReport) GetProcessesPsStateBlocked() float64 {
	if x != nil {
		return x.ProcessesPsStateBlocked
	}
	return 0
}

func (x *ServerMetricReport) GetProcessesPsStatePaging() float64 {
	if x != nil {
		return x.ProcessesPsStatePaging
	}
	return 0
}

func (x *ServerMetricReport) GetProcessesPsStateRunning() float64 {
	if x != nil {
		return x.ProcessesPsStateRunning
	}
	return 0
}

func (x *ServerMetricReport) GetProcessesPsStateSleeping() float64 {
	if x != nil {
		return x.ProcessesPsStateSleeping
	}
	return 0
}

func (x *ServerMetricReport) GetProcessesPsStateStopped() float64 {
	if x != nil {
		return x.ProcessesPsStateStopped
	}
	return 0
}

func (x *ServerMetricReport) GetProcessesPsStateZombies() float64 {
	if x != nil {
		return x.ProcessesPsStateZombies
	}
	return 0
}

func (x *ServerMetricReport) GetMemoryAndCacheMemoryBandwidthLocal() float64 {
	if x != nil {
		return x.MemoryAndCacheMemoryBandwidthLocal
	}
	return 0
}

func (x *ServerMetricReport) GetMemoryAndCacheMemoryBandwidthRemote() float64 {
	if x != nil {
		return x.MemoryAndCacheMemoryBandwidthRemote
	}
	return 0
}

func (x *ServerMetricReport) GetMemoryAndCacheBytesLlc() float64 {
	if x != nil {
		return x.MemoryAndCacheBytesLlc
	}
	return 0
}

func (x *ServerMetricReport) GetMemoryExceptionsErrorsCorrectedMemoryErrors() float64 {
	if x != nil {
		return x.MemoryExceptionsErrorsCorrectedMemoryErrors
	}
	return 0
}

func (x *ServerMetricReport) GetMemoryExceptionsErrorsUncorrectedMemoryError() float64 {
	if x != nil {
		return x.MemoryExceptionsErrorsUncorrectedMemoryError
	}
	return 0
}

func (x *ServerMetricReport) GetMemoryThrottlingSensor() float64 {
	if x != nil {
		return x.MemoryThrottlingSensor
	}
	return 0
}

func (x *ServerMetricReport) GetIpmiVoltage() float64 {
	if x != nil {
		return x.IpmiVoltage
	}
	return 0
}

func (x *ServerMetricReport) GetIpmiTemperatureAgg() float64 {
	if x != nil {
		return x.IpmiTemperatureAgg
	}
	return 0
}

func (x *ServerMetricReport) GetIpmiAirflow() float64 {
	if x != nil {
		return x.IpmiAirflow
	}
	return 0
}

func (x *ServerMetricReport) GetIpmiWattsInputPower() float64 {
	if x != nil {
		return x.IpmiWattsInputPower
	}
	return 0
}

type RepairServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId string `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
}

func (x *RepairServer) Reset() {
	*x = RepairServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_cloudfun_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepairServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairServer) ProtoMessage() {}

func (x *RepairServer) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_cloudfun_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairServer.ProtoReflect.Descriptor instead.
func (*RepairServer) Descriptor() ([]byte, []int) {
	return file_protobuf_cloudfun_proto_rawDescGZIP(), []int{1}
}

func (x *RepairServer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type ServerMetricHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports []*ServerMetricReport `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *ServerMetricHistory) Reset() {
	*x = ServerMetricHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_cloudfun_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMetricHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMetricHistory) ProtoMessage() {}

func (x *ServerMetricHistory) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_cloudfun_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMetricHistory.ProtoReflect.Descriptor instead.
func (*ServerMetricHistory) Descriptor() ([]byte, []int) {
	return file_protobuf_cloudfun_proto_rawDescGZIP(), []int{2}
}

func (x *ServerMetricHistory) GetReports() []*ServerMetricReport {
	if x != nil {
		return x.Reports
	}
	return nil
}

type ServerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RackId       string `protobuf:"bytes,1,opt,name=rack_id,json=rackId,proto3" json:"rack_id,omitempty"`
	ServerId     string `protobuf:"bytes,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	LastReported int64  `protobuf:"varint,3,opt,name=last_reported,json=lastReported,proto3" json:"last_reported,omitempty"`
	Status       Status `protobuf:"varint,4,opt,name=status,proto3,enum=com.ververica.Status" json:"status,omitempty"`
}

func (x *ServerState) Reset() {
	*x = ServerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_cloudfun_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerState) ProtoMessage() {}

func (x *ServerState) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_cloudfun_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerState.ProtoReflect.Descriptor instead.
func (*ServerState) Descriptor() ([]byte, []int) {
	return file_protobuf_cloudfun_proto_rawDescGZIP(), []int{3}
}

func (x *ServerState) GetRackId() string {
	if x != nil {
		return x.RackId
	}
	return ""
}

func (x *ServerState) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *ServerState) GetLastReported() int64 {
	if x != nil {
		return x.LastReported
	}
	return 0
}

func (x *ServerState) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

type ServersPerRack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusByServer map[string]Status `protobuf:"bytes,1,rep,name=statusByServer,proto3" json:"statusByServer,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=com.ververica.Status"`
}

func (x *ServersPerRack) Reset() {
	*x = ServersPerRack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_cloudfun_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServersPerRack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServersPerRack) ProtoMessage() {}

func (x *ServersPerRack) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_cloudfun_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServersPerRack.ProtoReflect.Descriptor instead.
func (*ServersPerRack) Descriptor() ([]byte, []int) {
	return file_protobuf_cloudfun_proto_rawDescGZIP(), []int{4}
}

func (x *ServersPerRack) GetStatusByServer() map[string]Status {
	if x != nil {
		return x.StatusByServer
	}
	return nil
}

type HealthUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=com.ververica.Status" json:"status,omitempty"`
}

func (x *HealthUpdate) Reset() {
	*x = HealthUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_cloudfun_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthUpdate) ProtoMessage() {}

func (x *HealthUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_cloudfun_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthUpdate.ProtoReflect.Descriptor instead.
func (*HealthUpdate) Descriptor() ([]byte, []int) {
	return file_protobuf_cloudfun_proto_rawDescGZIP(), []int{5}
}

func (x *HealthUpdate) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

// -------------------------------------------------------------------------------------------------------------------
// RackFun Internal State (in real world application this would probably be in a separate file)
// -------------------------------------------------------------------------------------------------------------------
type PerServerOpenIncidents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type []int32 `protobuf:"varint,1,rep,packed,name=type,proto3" json:"type,omitempty"`
}

func (x *PerServerOpenIncidents) Reset() {
	*x = PerServerOpenIncidents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_cloudfun_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerServerOpenIncidents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerServerOpenIncidents) ProtoMessage() {}

func (x *PerServerOpenIncidents) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_cloudfun_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerServerOpenIncidents.ProtoReflect.Descriptor instead.
func (*PerServerOpenIncidents) Descriptor() ([]byte, []int) {
	return file_protobuf_cloudfun_proto_rawDescGZIP(), []int{6}
}

func (x *PerServerOpenIncidents) GetType() []int32 {
	if x != nil {
		return x.Type
	}
	return nil
}

type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_cloudfun_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_cloudfun_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_protobuf_cloudfun_proto_rawDescGZIP(), []int{7}
}

var File_protobuf_cloudfun_proto protoreflect.FileDescriptor

var file_protobuf_cloudfun_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x66, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x76,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x63, 0x61, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x17, 0x0a, 0x12, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x70, 0x75, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x63,
	0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x70, 0x75, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x5f, 0x6e, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19,
	0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x4e, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x63, 0x70, 0x75,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x73, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x63,
	0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x53, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x12, 0x41, 0x0a, 0x1d, 0x63,
	0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1a, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x12, 0x43,
	0x0a, 0x1e, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x63, 0x70, 0x75, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x63, 0x70, 0x75, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x57, 0x61, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x66, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x33, 0x0a, 0x16,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x66, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x49,
	0x6e, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x66, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x66, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x69,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x66, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x12, 0x37, 0x0a,
	0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x66, 0x44, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x66, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x35, 0x0a,
	0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x66, 0x4f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x4f, 0x75, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x66, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x34, 0x0a,
	0x16, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x46,
	0x72, 0x65, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x61, 0x62, 0x5f, 0x72, 0x65, 0x63, 0x6c, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x53, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x63, 0x6c, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x61, 0x62,
	0x5f, 0x75, 0x6e, 0x72, 0x65, 0x63, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x6c, 0x61, 0x62, 0x55,
	0x6e, 0x72, 0x65, 0x63, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x69, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x64, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x6b,
	0x49, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x22,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6f, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6f, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x64, 0x69, 0x73, 0x6b, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64,
	0x49, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x64, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x6b, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x64, 0x69, 0x73, 0x6b, 0x44,
	0x69, 0x73, 0x6b, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x33,
	0x0a, 0x16, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x63, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13,
	0x64, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x6b, 0x4f, 0x63, 0x74, 0x65, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x6f, 0x63, 0x74, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x64, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x6b, 0x4f, 0x63,
	0x74, 0x65, 0x63, 0x74, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6f, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x6b,
	0x4f, 0x70, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6f, 0x70, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x64, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x6b, 0x4f, 0x70,
	0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x64, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x64, 0x69, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x5f, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x50, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x5f, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x50, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x3b,
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x70, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x50, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x18, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x50, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x50, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x5f, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x7a, 0x6f,
	0x6d, 0x62, 0x69, 0x65, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x50, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5a, 0x6f, 0x6d,
	0x62, 0x69, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x27, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x22, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x6e, 0x64,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x55, 0x0a, 0x28, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x52, 0x23, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x12, 0x3a, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x6c, 0x63, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x6c, 0x63, 0x12, 0x65, 0x0a, 0x30,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x2b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x67, 0x0a, 0x31, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f,
	0x75, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x2c,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x18,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x6d, 0x69, 0x5f, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x70,
	0x6d, 0x69, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x70, 0x6d,
	0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x67,
	0x67, 0x18, 0x34, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x69, 0x70, 0x6d, 0x69, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x67, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x70, 0x6d, 0x69, 0x5f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x69, 0x70, 0x6d, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x33,
	0x0a, 0x16, 0x69, 0x70, 0x6d, 0x69, 0x5f, 0x77, 0x61, 0x74, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13,
	0x69, 0x70, 0x6d, 0x69, 0x57, 0x61, 0x74, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x22, 0x2b, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x52, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x63, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x63, 0x61, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc5,
	0x01, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x52, 0x61, 0x63,
	0x6b, 0x12, 0x59, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x76, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x63, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x50, 0x65, 0x72, 0x52, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x58, 0x0a, 0x13,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x69, 0x63, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x69, 0x63, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2c, 0x0a, 0x16, 0x50, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x0b, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x2a, 0x3d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x4c, 0x54,
	0x48, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x42,
	0x2e, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x63, 0x61,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x01, 0x5a, 0x11, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x3b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_cloudfun_proto_rawDescOnce sync.Once
	file_protobuf_cloudfun_proto_rawDescData = file_protobuf_cloudfun_proto_rawDesc
)

func file_protobuf_cloudfun_proto_rawDescGZIP() []byte {
	file_protobuf_cloudfun_proto_rawDescOnce.Do(func() {
		file_protobuf_cloudfun_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_cloudfun_proto_rawDescData)
	})
	return file_protobuf_cloudfun_proto_rawDescData
}

var file_protobuf_cloudfun_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protobuf_cloudfun_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_protobuf_cloudfun_proto_goTypes = []interface{}{
	(Status)(0),                    // 0: com.ververica.Status
	(*ServerMetricReport)(nil),     // 1: com.ververica.ServerMetricReport
	(*RepairServer)(nil),           // 2: com.ververica.RepairServer
	(*ServerMetricHistory)(nil),    // 3: com.ververica.ServerMetricHistory
	(*ServerState)(nil),            // 4: com.ververica.ServerState
	(*ServersPerRack)(nil),         // 5: com.ververica.ServersPerRack
	(*HealthUpdate)(nil),           // 6: com.ververica.HealthUpdate
	(*PerServerOpenIncidents)(nil), // 7: com.ververica.PerServerOpenIncidents
	(*Heartbeat)(nil),              // 8: com.ververica.Heartbeat
	nil,                            // 9: com.ververica.ServersPerRack.StatusByServerEntry
}
var file_protobuf_cloudfun_proto_depIdxs = []int32{
	1, // 0: com.ververica.ServerMetricHistory.reports:type_name -> com.ververica.ServerMetricReport
	0, // 1: com.ververica.ServerState.status:type_name -> com.ververica.Status
	9, // 2: com.ververica.ServersPerRack.statusByServer:type_name -> com.ververica.ServersPerRack.StatusByServerEntry
	0, // 3: com.ververica.HealthUpdate.status:type_name -> com.ververica.Status
	0, // 4: com.ververica.ServersPerRack.StatusByServerEntry.value:type_name -> com.ververica.Status
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_protobuf_cloudfun_proto_init() }
func file_protobuf_cloudfun_proto_init() {
	if File_protobuf_cloudfun_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_cloudfun_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMetricReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_cloudfun_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepairServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_cloudfun_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMetricHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_cloudfun_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_cloudfun_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServersPerRack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_cloudfun_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_cloudfun_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerServerOpenIncidents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_cloudfun_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_cloudfun_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protobuf_cloudfun_proto_goTypes,
		DependencyIndexes: file_protobuf_cloudfun_proto_depIdxs,
		EnumInfos:         file_protobuf_cloudfun_proto_enumTypes,
		MessageInfos:      file_protobuf_cloudfun_proto_msgTypes,
	}.Build()
	File_protobuf_cloudfun_proto = out.File
	file_protobuf_cloudfun_proto_rawDesc = nil
	file_protobuf_cloudfun_proto_goTypes = nil
	file_protobuf_cloudfun_proto_depIdxs = nil
}
